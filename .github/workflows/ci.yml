name: CI/CD Pipeline

# Trigger the workflow on push or pull request events to the master branch
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9]

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Clear Poetry Cache
      run: |
        poetry cache clear pypi --all

    - name: Cache Poetry dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Install dependencies
      run: |
        poetry install

    - name: Lint code
      run: |
        poetry run flake8 .

    - name: Format code
      run: |
        poetry run black --check .

    - name: Run migrations
      run: |
        poetry run alembic upgrade head

    - name: Run tests with coverage
      env:
        DATABASE_URL_TEST: ${{ secrets.DATABASE_URL_TEST }}
      run: |
        poetry run pytest --cov=app --cov-report=xml --cov-report=html tests/
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: htmlcov

    - name: Archive test results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: reports/test-results.xml

    - name: Build package
      run: |
        poetry build

    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-artifacts
        path: dist/*
